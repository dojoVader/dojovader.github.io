---
import { ClientRouter } from 'astro:transitions';
import BaseHead, { type Props as HeadProps } from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import Nav from '../components/Nav.astro';
import { GoogleAnalytics } from 'astro-google-analytics';

export type Props = HeadProps & { showHeader?: boolean };

const { showHeader = true, ...head } = Astro.props;
---

<!doctype html>
<html lang="en" class="antialiased break-words">
    <head>
        <BaseHead {...head} />

        <script>
            if (localStorage.theme === 'dark') {
                document.documentElement.classList.add('dark');
            }
        </script>

        <ClientRouter />

    </head>
    <GoogleAnalytics id={'G-2K2P5C1VVE'} />
    <body class="bg-main text-main">
        <div class="flex flex-col min-h-screen px-4 md:px-8">
            <Nav />
            {showHeader && <Header />}
            <main class="grow w-full max-w-3xl mx-auto">
                <slot />
            </main>
            <Footer />

        </div>

    </body>
    <script>

    // Let's find all the images on the page
    //

    const loadLB = () => {
      // Find all the images
      if(window.loaded) return false;
      const images = document.querySelectorAll('img');
      Array.from(images).forEach(item => {
        const parentElement = item.parentElement;
        // Create the anchor linkf or the images
        const anchorLink = document.createElement('a');
        anchorLink.setAttribute('data-lightbox','screenshots');
        anchorLink.appendChild(item);
        anchorLink.href = item.src;
        parentElement?.append(anchorLink);
      });

      window.loaded = true;
    }

    console.log("Init Fired");
    document.addEventListener('DOMContentLoaded',() => {


      // Get the width of the screen
      const execute = () => {
        const queryElement = document.querySelector("button.menu-toggle");
        queryElement?.addEventListener('click',() => {
          const isMobileScreen = screen.availWidth <= 480;
          if(isMobileScreen){
             console.log('Is Mobile Screen:'+isMobileScreen)
             // Let's toggle the element to be displayed
             const menuElement = document.querySelector("ul#menu-items");
             if(menuElement.style.visibility === "hidden"){
               menuElement.style.transition = "opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1) 0.2s";
               menuElement.style.visibility = "visible";
               menuElement.style.opacity = "1";
             }else{
                menuElement.style.transition = "opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1) 0.2s";
                menuElement.style.visibility = "hidden";
                menuElement.style.opacity = "0";
             }

           }
        })
      }

      const bounceFn = debounce(() => {
        console.log('Debounced Function Executed');
        execute();
      },1000);

      bounceFn();


      // Create a mutationObserver
      const mutationObserver= new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            bounceFn();
          }
        });
    });
      // Start the observer
      const targetElement = document.querySelector("html");
      console.log(targetElement)
      mutationObserver.observe(targetElement, {
        attributes: true,
        attributeFilter: ['class'],
      });
    });

    function debounce(
      func,
      timeout = 300,
    ) {
      let timer;
      return (...args) => {
        clearTimeout(timer);
        timer = setTimeout(() => {
          func.apply(this, args);
        }, timeout);
      };
    }

    </script>
</html>
